==27582== Memcheck, a memory error detector
==27582== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==27582== Using Valgrind-3.14.0 and LibVEX; rerun with -h for copyright info
==27582== Command: ./main
==27582== 
==27582== Invalid read of size 8
==27582==    at 0x10EB27: IO::swap_deck_top() (in /home/iashatilov/ts/main)
==27582==    by 0x10FAA3: IO::move_held(std::vector<Card*, std::allocator<Card*> >*, int, bool*, E_STATUS) (in /home/iashatilov/ts/main)
==27582==    by 0x10C186: IO::IO(int, int, int, int, int, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/iashatilov/ts/main)
==27582==    by 0x11E625: main (in /home/iashatilov/ts/main)
==27582==  Address 0xfffffffffffffff8 is not stack'd, malloc'd or (recently) free'd
==27582== 
==27582== 
==27582== Process terminating with default action of signal 11 (SIGSEGV)
==27582==  Access not within mapped region at address 0xFFFFFFFFFFFFFFF8
==27582==    at 0x10EB27: IO::swap_deck_top() (in /home/iashatilov/ts/main)
==27582==    by 0x10FAA3: IO::move_held(std::vector<Card*, std::allocator<Card*> >*, int, bool*, E_STATUS) (in /home/iashatilov/ts/main)
==27582==    by 0x10C186: IO::IO(int, int, int, int, int, bool, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> >) (in /home/iashatilov/ts/main)
==27582==    by 0x11E625: main (in /home/iashatilov/ts/main)
==27582==  If you believe this happened as a result of a stack
==27582==  overflow in your program's main thread (unlikely but
==27582==  possible), you can try to increase the size of the
==27582==  main thread stack using the --main-stacksize= flag.
==27582==  The main thread stack size used in this run was 8388608.
==27582== 
==27582== HEAP SUMMARY:
==27582==     in use at exit: 320,315 bytes in 3,504 blocks
==27582==   total heap usage: 32,172 allocs, 28,668 frees, 2,364,834 bytes allocated
==27582== 
==27582== LEAK SUMMARY:
==27582==    definitely lost: 736 bytes in 23 blocks
==27582==    indirectly lost: 0 bytes in 0 blocks
==27582==      possibly lost: 0 bytes in 0 blocks
==27582==    still reachable: 319,579 bytes in 3,481 blocks
==27582==         suppressed: 0 bytes in 0 blocks
==27582== Rerun with --leak-check=full to see details of leaked memory
==27582== 
==27582== For counts of detected and suppressed errors, rerun with: -v
==27582== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
